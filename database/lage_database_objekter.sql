	
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE DATABASE DEV_DB;

CREATE USER 'bruker'@'%' IDENTIFIED WITH mysql_native_password BY 'passord';

GRANT ALL ON DEV_DB.* TO 'bruker'@'%';


USE DEV_DB;



CREATE TABLE WORD_LOG
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
WORDID BIGINT,
PID BIGINT,
STARTTIME TIMESTAMP NULL DEFAULT NULL,
ENDTIME TIMESTAMP NULL DEFAULT NULL,
STARTMILLISECOND BIGINT,
ENDMILLISECOND BIGINT,
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE WORD
(
ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
STRING VARCHAR(60),
STRING_SPLIT VARCHAR(100),
STRING_HTML VARCHAR(255),
WORDRANK INT,
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE CATEGORY
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
CATEGORYNAME NVARCHAR(100),
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE WORD_CATEGORY_MAP
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
WORDID INT,
CATEGORYID INT,
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE PLAYER
(
ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
PID VARCHAR(255),
NAME VARCHAR(255),
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE WORD_SYLLABLE_MAP
(
ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
WORD_WORD_ID INT,
SYLLABLE_WORD_ID INT,
CREATED DATETIME DEFAULT CURRENT_TIMESTAMP,
LASTUPDATED DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);



------------------ diverse view---------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE VIEW V_BRONZE_STARS AS

WITH PLAYER_WORD AS
(
	SELECT 
	T1.PID
	, T2.ID AS WORDID
	, T2.WORDRANK
	 FROM PLAYER T1
	JOIN WORD T2 ON 1=1
)
,AGG_DATA AS
(
	SELECT 
	PID
	, WORDID
	, COUNT(*) AS COUNT
	, MAX(ID) AS MAX_BRONZE_WORD_LOG_ID
	 FROM WORD_LOG
	 WHERE endmillisecond-startmillisecond BETWEEN 500 AND 4000
	 GROUP BY
	 PID
	, WORDID
)

SELECT 
T1.PID
, T1.WORDID
, T1.WORDRANK
, CASE 
	WHEN T2.COUNT IS NULL THEN 0
	WHEN T2.COUNT>=5 THEN 5
	ELSE T2.COUNT
	END AS BRONZE_STARS
, MAX_BRONZE_WORD_LOG_ID
, T3.ENDTIME
FROM PLAYER_WORD T1
LEFT JOIN AGG_DATA T2 ON T1.PID = T2.PID AND T1.WORDID = T2.WORDID
LEFT JOIN WORD_LOG T3 ON T2.MAX_BRONZE_WORD_LOG_ID = T3.ID;

----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW V_SILVER_STARS AS

WITH PLAYER_WORD AS
(
	SELECT 
	T1.PID
	, T2.ID AS WORDID
	, T2.WORDRANK
	 FROM PLAYER T1
	JOIN WORD T2 ON 1=1
)
,AGG_DATA AS
(
	SELECT 
	PID
	, WORDID
	, COUNT(*) AS COUNT
	, MAX(ID) AS MAX_SILVER_WORD_LOG_ID
	 FROM WORD_LOG
	 WHERE endmillisecond-startmillisecond < 2501 
	 GROUP BY
	 PID
	, WORDID
)

SELECT 
T1.PID
, T1.WORDID
, T1.WORDRANK
, CASE 
	WHEN T2.COUNT IS NULL THEN 0
	WHEN T2.COUNT>=5 THEN 5
	ELSE T2.COUNT
	END AS SILVER_STARS
, MAX_SILVER_WORD_LOG_ID
, T3.ENDTIME
FROM PLAYER_WORD T1
LEFT JOIN AGG_DATA T2 ON T1.PID = T2.PID AND T1.WORDID = T2.WORDID
LEFT JOIN WORD_LOG T3 ON T2.MAX_SILVER_WORD_LOG_ID = T3.ID;



----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------



CREATE OR REPLACE VIEW V_GOLD_STARS AS

WITH PLAYER_WORD AS
(
	SELECT 
	T1.PID
	, T2.ID AS WORDID
	, T2.WORDRANK
	 FROM PLAYER T1
	JOIN WORD T2 ON 1=1
)
, AGG_DATA AS
(
	 SELECT
	 WX.ID
	 , WX.PID
	 , WX.WORDID
	 , WX.endmillisecond-WX.startmillisecond as lag0
	 , LAG(WX.endmillisecond-WX.startmillisecond,1,9999) OVER w AS lag1
	 , LAG(WX.endmillisecond-WX.startmillisecond,2,9999) OVER w AS lag2
	 , LAG(WX.endmillisecond-WX.startmillisecond,3,9999) OVER w AS lag3
	 , LAG(WX.endmillisecond-WX.startmillisecond,4,9999) OVER w AS lag4
	 , RANK() OVER (PARTITION BY WX.PID, WX.WORDID ORDER BY WX.ID DESC) AS last_word
	 FROM WORD_LOG WX
	WHERE 1=1
	 and startmillisecond IS NOT NULL 
	 AND endmillisecond IS NOT null
	 WINDOW w AS (partition by WX.PID, WX.WORDID ORDER BY WX.ID)
	

)
SELECT 
T1.PID
, T1.WORDID
, T1.WORDRANK
, case 
	when lag0 < 2501 AND lag1 < 2501 AND lag2 < 2501 AND lag3 < 2501 AND lag4 < 2501 then 5
	when lag0 < 2501 AND lag1 < 2501 AND lag2 < 2501 AND lag3 < 2501 then 4
	when lag0 < 2501 AND lag1 < 2501 AND lag2 < 2501 then 3
	when lag0 < 2501 AND lag1 < 2501 then 2
	when lag0 < 2501 then 1
	WHEN T2.PID IS NULL THEN 0 
	ELSE 0 END AS GOLD_STARS
, T2.ID AS MAX_GOLD_WORD_LOG_ID
, T3.ENDTIME
FROM PLAYER_WORD T1
LEFT JOIN AGG_DATA T2 ON T1.PID = T2.PID AND T1.WORDID = T2.WORDID AND last_word = 1
LEFT JOIN WORD_LOG T3 ON T2.ID = T3.ID;



----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- BRUKES TIL Å POPULERE SIDEN ORD.PHP


CREATE OR REPLACE VIEW V_ORD AS
WITH WORD_CATEGORY AS
(
	SELECT 
	T1.ID AS WORDID
	, LOWER(group_concat(T3.CATEGORYNAME ORDER BY T3.CATEGORYNAME)) AS CATEGORYNAME_CONCAT
	 FROM WORD T1
	JOIN WORD_CATEGORY_MAP T2 ON T1.ID = T2.WORDID
	JOIN CATEGORY T3 ON T2.CATEGORYID = T3.ID
	GROUP BY T1.ID

)


, PLAYER_WORD AS
(
	SELECT 
	T1.PID
	, T2.ID AS WORDID
	, T2.STRING AS WORD
	, T2.WORDRANK
	 FROM PLAYER T1
	JOIN WORD T2 ON 1=1
)
SELECT 
A.PID
, A.WORDID
, A.WORD
, B.BRONZE_STARS
, S.SILVER_STARS
, G.GOLD_STARS
, C.CATEGORYNAME_CONCAT
, B.MAX_BRONZE_WORD_LOG_ID
, S.MAX_SILVER_WORD_LOG_ID
, G.MAX_GOLD_WORD_LOG_ID
, B.ENDTIME AS BRONZE_ENDTIME
, S.ENDTIME AS SILVER_ENDTIME
, G.ENDTIME AS GOLD_ENDTIME
FROM PLAYER_WORD A
JOIN WORD_CATEGORY C ON A.WORDID = C.WORDID
join V_BRONZE_STARS B ON A.PID = B.PID AND A.WORDID = B.WORDID
JOIN V_SILVER_STARS S ON A.PID = S.PID AND A.WORDID = S.WORDID
JOIN V_GOLD_STARS G ON A.PID = G.PID AND A.WORDID = G.WORDID
ORDER BY A.WORDRANK;



----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- BRUKES TIL Å POPULERE SIDEN KLISTREMERKER.PHP

CREATE OR REPLACE VIEW V_KLISTREMERKE AS
WITH CATEGORYWORD AS
(
	SELECT 
	T4.PID
	, T1.ID
	, T1.CATEGORYNAME
	, T3.ID AS WORDID
	, T3.STRING AS WORD	
	, 5 AS AVAILABLE_BRONZE_STARS
	, 5 AS AVAILABLE_SILVER_STARS
	, 5 AS AVAILABLE_GOLD_STARS
	FROM CATEGORY T1
	JOIN WORD_CATEGORY_MAP T2 ON T1.ID = T2.CATEGORYID
	JOIN WORD T3 ON T2.WORDID = T3.ID
	JOIN PLAYER T4 ON 1=1

)


, PLAYER_RESULT AS
(
	SELECT PID
	, WORDID
	, BRONZE_STARS
	, SILVER_STARS
	, GOLD_STARS 
	, MAX_BRONZE_WORD_LOG_ID
	, MAX_SILVER_WORD_LOG_ID
	, MAX_GOLD_WORD_LOG_ID
	FROM V_ORD
) , CALCULATION AS
(
	SELECT 
	 T1.PID
	, T1.ID AS CATEGORY_ID
	, T1.CATEGORYNAME
	, LOWER(T1.CATEGORYNAME) AS LOWER_CATEGORYNAME
	, SUM(T2.BRONZE_STARS) AS BRONZE_STARS
	, SUM(T2.SILVER_STARS) AS SILVER_STARS
	, SUM(T2.GOLD_STARS) AS GOLD_STARS
	, SUM(T1.AVAILABLE_BRONZE_STARS) AS AVAILABLE_BRONZE_STARS
	, SUM(T1.AVAILABLE_SILVER_STARS) AS AVAILABLE_SILVER_STARS
	, SUM(T1.AVAILABLE_GOLD_STARS) AS AVAILABLE_GOLD_STARS
	, FLOOR(COALESCE(SUM(T2.BRONZE_STARS)/SUM(T1.AVAILABLE_BRONZE_STARS),0)*100) AS PERCENT_BRONZE
	, FLOOR(COALESCE(SUM(T2.SILVER_STARS)/SUM(T1.AVAILABLE_SILVER_STARS),0)*100) AS PERCENT_SILVER
	, FLOOR(COALESCE(SUM(T2.GOLD_STARS)/SUM(T1.AVAILABLE_GOLD_STARS),0)*100) AS PERCENT_GOLD
	, GROUP_CONCAT(T1.WORD ORDER BY WORD ASC) AS ARRAY_WORD
	, MAX(T2.MAX_BRONZE_WORD_LOG_ID) AS MAX_BRONZE_WORD_LOG_ID
	, MAX(T2.MAX_SILVER_WORD_LOG_ID) AS MAX_SILVER_WORD_LOG_ID
	, MAX(T2.MAX_GOLD_WORD_LOG_ID) AS MAX_GOLD_WORD_LOG_ID
	 FROM CATEGORYWORD T1
	LEFT JOIN PLAYER_RESULT T2 ON T1.WORDID = T2.WORDID AND T1.PID = T2.PID
	GROUP BY 
	T1.PID
	, T1.ID
	, T1.CATEGORYNAME
	, LOWER(T1.CATEGORYNAME)
	ORDER BY T1.CATEGORYNAME
)
SELECT T1.PID
, T1.CATEGORY_ID
, T1.CATEGORYNAME
, T1.LOWER_CATEGORYNAME
, T1.BRONZE_STARS
, T1.SILVER_STARS
, T1.GOLD_STARS
, T1.AVAILABLE_BRONZE_STARS
, T1.AVAILABLE_SILVER_STARS
, T1.AVAILABLE_GOLD_STARS
, T1.PERCENT_BRONZE
, T1.PERCENT_SILVER
, T1.PERCENT_GOLD
, T1.ARRAY_WORD
, T1.MAX_BRONZE_WORD_LOG_ID
, T1.MAX_SILVER_WORD_LOG_ID
, T1.MAX_GOLD_WORD_LOG_ID
, T2.ENDTIME AS BRONZE_ENDTIME
, T3.ENDTIME AS SILVER_ENDTIME
, T4.ENDTIME AS GOLD_ENDTIME
FROM CALCULATION T1
LEFT JOIN WORD_LOG T2 ON T1.PID = T2.PID AND T1.MAX_BRONZE_WORD_LOG_ID = T2.ID
LEFT JOIN WORD_LOG T3 ON T1.PID = T3.PID AND T1.MAX_BRONZE_WORD_LOG_ID = T3.ID
LEFT JOIN WORD_LOG T4 ON T1.PID = T4.PID AND T1.MAX_BRONZE_WORD_LOG_ID = T4.ID;



--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

-- ANTALL STJERNER TIL POENG OVERST

CREATE OR REPLACE VIEW V_INGAME_SCORE_BOARD AS
SELECT PID, 3 AS RANK_ORDER, 'BRONZE' AS MEDAL ,SUM(BRONZE_STARS) AS STARS 
FROM V_BRONZE_STARS
GROUP BY PID

UNION ALL

SELECT PID, 2 AS RANK_ORDER, 'SILVER' AS MEDAL ,SUM(SILVER_STARS) AS STARS 
FROM V_SILVER_STARS
GROUP BY PID

UNION ALL

SELECT PID, 1 AS RANK_ORDER, 'GOLD' AS MEDAL ,SUM(GOLD_STARS) AS STARS 
FROM V_GOLD_STARS
GROUP BY PID;
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------


-- FINNE 5 FOREGÅENDE FOR Å SJEKKE 5. GANG UNDER 2500 MILLISEKUNDER / FERDIG
-- SJEKKE OM DET ER NÅ 5 SOM TILFREDSTILLER SØLV / FERDIG
-- SJEKKE OM DET ER NÅ 5 SOM TILFREDSTILLER BRONSE / FERDIG

-- SJEKKE OM KATEGORIEN ER FERDIG MED BRONSE
-- SJEKKE OM KATEGORIEN ER FERDIG MED SØLV
-- SJEKKE OM KATEGORIEN ER FERDIG MED GULL



------ SHOWS IF PREVIOUS WORD TRIGGERED MEDAL   ------------------------------------
CREATE OR REPLACE VIEW V_PRICE_LOG AS
WITH BRONZE_CHECK AS
(
	SELECT T1.ID
	, T1.PID
	, T1.WORDID 
	, RANK() OVER (PARTITION BY T1.PID, T1.WORDID ORDER BY T1.ID) AS WORDRANK
	, CONVERT_TZ(T1.ENDTIME,'UTC','CET') AS ENDTIME
	, T2.STRING
	FROM WORD_LOG T1 
	JOIN WORD T2 ON T1.WORDID = T2.ID
	WHERE 1=1
	AND T1.endmillisecond-T1.startmillisecond BETWEEN 0 AND 4000
)

, SILVER_CHECK AS
(
	SELECT T1.ID
	, T1.PID
	, T1.WORDID 
	, RANK() OVER (PARTITION BY T1.PID, T1.WORDID ORDER BY T1.ID) AS WORDRANK
	, CONVERT_TZ(T1.ENDTIME,'UTC','CET') AS ENDTIME
	, T2.STRING
	FROM WORD_LOG T1 
	JOIN WORD T2 ON T1.WORDID = T2.ID
	WHERE 1=1
	AND T1.endmillisecond-T1.startmillisecond BETWEEN 0 AND 2501
)
, GOLD_CHECK AS
(
	 SELECT
	 WX.ID
	 , WX.PID
	 , WX.WORDID
	 , WX.endmillisecond-WX.startmillisecond AS LAG0
	 , LAG(WX.endmillisecond-WX.startmillisecond,1,9999) OVER w AS LAG1
	 , LAG(WX.endmillisecond-WX.startmillisecond,2,9999) OVER w AS LAG2
	 , LAG(WX.endmillisecond-WX.startmillisecond,3,9999) OVER w AS LAG3
	 , LAG(WX.endmillisecond-WX.startmillisecond,4,9999) OVER w AS LAG4
 	 , RANK() OVER (PARTITION BY PID, WORDID ORDER BY ID) AS WORDRANK
	 , CONVERT_TZ(ENDTIME,'UTC','CET') AS ENDTIME
	 , T2.STRING
	 FROM WORD_LOG WX
	 JOIN WORD T2 ON WX.WORDID = T2.ID
	WHERE 1=1
	 and WX.startmillisecond IS NOT NULL 
	 AND WX.endmillisecond IS NOT null
	 WINDOW w AS (partition by WX.PID, WX.WORDID ORDER BY WX.ID)




)

SELECT ID
, PID
, WORDID AS MEDAL_ID
, CONCAT('5X - ', STRING) AS MEDAL
, 'BRONZE' AS MEDAL_VALUE
, 'WORD' AS OBJECT_TYPE
, ENDTIME
FROM BRONZE_CHECK 
WHERE WORDRANK = 5

UNION ALL

SELECT ID
, PID
, WORDID AS MEDAL_ID
, CONCAT('5X - ', STRING) AS MEDAL
, 'SILVER' AS MEDAL_VALUE
, 'WORD' AS OBJECT_TYPE
, ENDTIME
FROM SILVER_CHECK 
WHERE WORDRANK = 5

UNION ALL

SELECT ID
, PID
, WORDID AS MEDAL_ID
, CONCAT('5X - ', STRING) AS MEDAL
, 'GOLD' AS MEDAL_VALUE
, 'WORD' AS OBJECT_TYPE
, ENDTIME
FROM GOLD_CHECK
WHERE 1=1
AND LAG0 < 2501
AND LAG1 < 2501
AND LAG2 < 2501
AND LAG3 < 2501
AND LAG4 < 2501
AND WORDRANK = 5

UNION ALL

SELECT 
MAX_BRONZE_WORD_LOG_ID AS ID
, PID
, CATEGORY_ID AS MEDAL_ID
, LOWER_CATEGORYNAME AS MEDAL
, 'BRONZE' AS MEDAL_VALUE
, 'KLISTREMERKE' AS OBJECT_TYPE
, CONVERT_TZ(BRONZE_ENDTIME,'UTC','CET') AS ENDTIME
 FROM V_KLISTREMERKE
WHERE 1=1
AND BRONZE_STARS = AVAILABLE_BRONZE_STARS


UNION ALL

SELECT 
MAX_SILVER_WORD_LOG_ID AS ID
, PID
, CATEGORY_ID AS MEDAL_ID
, LOWER_CATEGORYNAME AS MEDAL
, 'SILVER' AS MEDAL_VALUE
, 'KLISTREMERKE' AS OBJECT_TYPE
, CONVERT_TZ(SILVER_ENDTIME,'UTC','CET') AS ENDTIME
 FROM V_KLISTREMERKE
WHERE 1=1
AND SILVER_STARS = AVAILABLE_SILVER_STARS

UNION ALL

SELECT 
MAX_GOLD_WORD_LOG_ID AS ID
, PID
, CATEGORY_ID AS MEDAL_ID
, LOWER_CATEGORYNAME AS MEDAL
, 'GOLD' AS MEDAL_VALUE
, 'KLISTREMERKE' AS OBJECT_TYPE
, CONVERT_TZ(GOLD_ENDTIME,'UTC','CET') AS ENDTIME
 FROM V_KLISTREMERKE
WHERE 1=1
AND GOLD_STARS = AVAILABLE_GOLD_STARS


;

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

